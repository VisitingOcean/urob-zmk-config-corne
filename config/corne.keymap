/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "mouse.dtsi"
#define MOUSE 6
/ {
    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | ENT | RSE|   | LWR | SPC  | ALT |

            bindings = <
&mt RG(GRAVE) TAB    &kp Q  &kp W  &kp E     &kp R  &kp T                 &kp Y  &kp U      &kp I         &kp O    &kp P     &kp LCTRL
&mt LCTRL BACKSPACE  &kp A  &kp S  &kp D     &kp F  &kp G                 &kp H  &kp J      &kp K         &kp L    &kp SEMI  &kp SQT
&kp LSHFT            &kp Z  &kp X  &kp C     &kp V  &kp B                 &kp N  &kp M      &kp COMMA     &kp DOT  &kp FSLH  &mt RIGHT_SHIFT ESCAPE
                                   &kp LGUI  &mo 2  &mt LEFT_ALT ENTER    &mo 1  &kp SPACE  &kp LEFT_ALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | ENT |   | SPC |     | ALT |

            bindings = <
&kp TAB  &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6  &kp N7    &kp N8        &kp N9        &kp N0     &kp BSPC
&trans   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &kp LEFT  &kp DOWN      &kp UP_ARROW  &kp RIGHT  &trans
&trans   &trans        &trans        &trans        &trans        &bt BT_CLR      &trans  &trans    &trans        &trans        &trans     &trans
                                     &kp LGUI      &trans        &trans          &trans  &trans    &kp LEFT_ALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR          &kp RPAR           &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp BACKSLASH    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp GRAVE
&mo 4      &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp PIPE         &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp TILDE
                             &kp LGUI  &trans    &trans       &trans     &trans     &kp LEFT_ALT
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans    &trans  &trans          &trans            &trans          &trans           &trans
&trans  &trans  &mkp MCLK  &mkp RCLK  &mkp LCLK  &trans    &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN    &mmv MOVE_UP    &mmv MOVE_RIGHT  &trans
&trans  &trans  &trans     &trans     &trans     &trans    &trans  &trans          &mwh SCROLL_DOWN  &mwh SCROLL_UP  &trans           &trans
                           &trans     &trans     &trans    &trans  &trans          &trans
            >;
        };

        left_ctrl_maps {
            bindings = <
&kp LS(LC(TAB))  &kp LC(Q)  &kp LC(W)  &kp LC(E)  &kp LC(R)  &kp LC(T)    &kp Y   &kp U   &kp I      &kp O    &kp P     &trans
&kp LEFT_SHIFT   &kp LC(A)  &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(G)    &kp H   &kp J   &kp K      &kp L    &kp SEMI  &trans
&trans           &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)    &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans
                                       &trans     &trans     &trans       &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        mouse_conditional_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
